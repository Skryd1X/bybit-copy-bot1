from dotenv import load_dotenv
import os
load_dotenv()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import logging
from pymongo import MongoClient
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CRYPTOBOT_API_URL = "https://pay.crypt.bot/api"
CRYPTOBOT_TOKEN = os.getenv("CRYPTOBOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

client = MongoClient(MONGO_URI)
db = client["signal_bot"]
users_collection = db["users"]
invoices_collection = db["invoices"]

# === –¢–∞—Ä–∏—Ñ—ã: –∫–æ–ª-–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤, —Ü–µ–Ω–∞ –≤ USDT
PACKAGE_MAP = {
    "buy_15": (15, 15),
    "buy_30": (35, 30),
    "buy_50": (60, 50),
}

# === –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_lang(user_id: int) -> str:
    user = users_collection.find_one({"user_id": user_id})
    return user.get("lang", "ru") if user else "ru"

# === –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ CryptoBot
def create_invoice(amount: float, asset: str, description: str, hidden_payload: str) -> dict:
    url = f"{CRYPTOBOT_API_URL}/createInvoice"
    headers = {
        "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN
    }
    data = {
        "asset": asset,
        "amount": str(amount),
        "description": description,
        "hidden_message": "Thanks for your payment!",
        "hidden_payload": hidden_payload,
        "allow_comments": False,
        "allow_anonymous": False
    }
    try:
        response = requests.post(url, headers=headers, json=data)
        result = response.json()
        logging.info(f"CryptoBot invoice response: {result}")
        return result
    except Exception as e:
        logging.error(f"Invoice creation failed: {e}")
        return {"ok": False}

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–≤–æ–π—Å–∞ –∏ –∫–Ω–æ–ø–∫–∏ ===
async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    tariff = query.data

    if tariff not in PACKAGE_MAP:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    signals, amount = PACKAGE_MAP[tariff]
    lang = get_user_lang(user_id)
    payload = f"user_{user_id}_{signals}"
    description = f"{signals} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ {amount} USDT"

    invoice_response = create_invoice(
        amount=amount,
        asset="USDT",
        description=description,
        hidden_payload=payload
    )

    if not invoice_response.get("ok"):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Invoice creation failed: {invoice_response}")
        return

    invoice_url = invoice_response["result"]["pay_url"]
    invoice_id = invoice_response["result"]["invoice_id"]

    invoices_collection.insert_one({
        "invoice_id": invoice_id,
        "user_id": user_id,
        "signals": signals,
        "status": "pending",
        "payload": payload
    })

    text = (
        f"üí∞ *–°—á—ë—Ç —Å–æ–∑–¥–∞–Ω!*\n"
        f"üíµ –°—É–º–º–∞: *{amount:.2f} USDT*\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: *{signals} —Å–∏–≥–Ω–∞–ª–æ–≤*\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã."
    ) if lang == "ru" else (
        f"üí∞ *Invoice created!*\n"
        f"üíµ Amount: *{amount:.2f} USDT*\n"
        f"üì¶ Package: *{signals} signals*\n\n"
        f"Click the button below to pay."
    )
    pay_button = "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å" if lang == "ru" else "üí≥ Pay"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(pay_button, url=invoice_url)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_invoice_{invoice_id}")]
    ])

    try:
        await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=keyboard)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            await query.answer("‚åõ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.", show_alert=True)
        else:
            raise e

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" ===
async def check_invoice_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    invoice_id = data.replace("check_invoice_", "")
    url = f"{CRYPTOBOT_API_URL}/getInvoices?invoice_ids={invoice_id}"
    headers = {
        "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN
    }

    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        logging.info(f"Invoice status response: {data}")
    except Exception as e:
        logging.error(f"Failed to check invoice status: {e}")
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not data.get("ok"):
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    items = data["result"].get("items", [])
    if not items:
        await query.edit_message_text("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    invoice = items[0]
    status = invoice["status"]
    invoice_url = invoice["pay_url"]

    if status == "paid":
        invoice_doc = invoices_collection.find_one({"invoice_id": int(invoice_id)})
        if not invoice_doc:
            await query.edit_message_text("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        users_collection.update_one(
            {"user_id": user_id},
            {"$inc": {"signals_left": invoice_doc["signals"]}, "$set": {"copy_enabled": True}},
            upsert=True
        )
        invoices_collection.update_one({"invoice_id": int(invoice_id)}, {"$set": {"status": "paid"}})

        await query.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {invoice_doc['signals']} —Å–∏–≥–Ω–∞–ª–æ–≤.")

        # üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            lang = get_user_lang(user_id)
            text = (
                f"üéâ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n"
                f"üîì –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ *{invoice_doc['signals']}* —Å–∏–≥–Ω–∞–ª–æ–≤.\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–∏—è—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏! üìà"
            ) if lang == "ru" else (
                f"üéâ *Payment successful!*\n"
                f"üîì You have received *{invoice_doc['signals']}* signals.\n"
                f"Thank you for your purchase and happy trading! üìà"
            )
            await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")
            logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

    elif status == "expired":
        await query.edit_message_text("‚ùå –°—á—ë—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.")

    else:
        invoice_doc = invoices_collection.find_one({"invoice_id": int(invoice_id)})
        if not invoice_doc:
            await query.edit_message_text("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        signals = invoice_doc["signals"]
        amount = {
            15: 15, 35: 30, 60: 50
        }.get(signals, 0)

        lang = get_user_lang(user_id)
        text = (
            f"‚åõ *–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞...*\n"
            f"üíµ –°—É–º–º–∞: *{amount} USDT*\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: *{signals} —Å–∏–≥–Ω–∞–ª–æ–≤*\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É."
        ) if lang == "ru" else (
            f"‚åõ *Payment not confirmed yet...*\n"
            f"üíµ Amount: *{amount} USDT*\n"
            f"üì¶ Package: *{signals} signals*\n\n"
            f"Try again later or complete the payment."
        )
        pay_button = "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å" if lang == "ru" else "üí≥ Pay"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(pay_button, url=invoice_url)],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_invoice_{invoice_id}")]
        ])

        try:
            await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=keyboard)
        except BadRequest as e:
            if "Message is not modified" in str(e):
                await query.answer("‚åõ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.", show_alert=True)
            else:
                raise e