from dotenv import load_dotenv
import os
load_dotenv()

from pybit.unified_trading import HTTP
from telegram import Bot
from pymongo import MongoClient
from datetime import datetime
from decimal import Decimal, ROUND_DOWN
import logging

# ‚ö†Ô∏è –õ—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ .env, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –ø—Ä–∏–º–µ—Ä–µ
BOT_TOKEN = "8128401211:AAG0K7GG23Ia4afmChkaXCct2ULlbP1-8c4"
bot = Bot(token=BOT_TOKEN)

MONGO_URI = os.getenv("MONGO_URI")
client = MongoClient(MONGO_URI)
users_collection = client["signal_bot"]["users"]
history_collection = client["signal_bot"]["history"]

# ===================== i18n =====================
TEXTS = {
    "ru": {
        "opened_title": "üìà *–ù–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞*",
        "closed_title": "üõë *–ù–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞*",
        "pair": "üîπ –ü–∞—Ä–∞",
        "side": "üß≠ –°—Ç–æ—Ä–æ–Ω–∞",
        "entry": "üéØ –í—Ö–æ–¥",
        "qty": "üíº –û–±—ä—ë–º",
        "lev": "‚öôÔ∏è –ü–ª–µ—á–æ",
        "time": "üìÖ –í—Ä–µ–º—è",
        "buy": "Buy",
        "sell": "Sell",
    },
    "en": {
        "opened_title": "üìà *A trade has been opened on your account*",
        "closed_title": "üõë *A trade has been closed on your account*",
        "pair": "üîπ Pair",
        "side": "üß≠ Side",
        "entry": "üéØ Entry",
        "qty": "üíº Size",
        "lev": "‚öôÔ∏è Leverage",
        "time": "üìÖ Time",
        "buy": "Buy",
        "sell": "Sell",
    },
}

def tr(lang: str, key: str) -> str:
    lang = "en" if lang == "en" else "ru"
    return TEXTS[lang][key]
# =================================================

def round_qty(qty, step):
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —à–∞–≥—É –ª–æ—Ç–∞ –≤–Ω–∏–∑."""
    return float(Decimal(qty).quantize(Decimal(step), rounding=ROUND_DOWN))


def _is_hedge_mode(positions_list):
    """
    –ì—Ä—É–±–∞—è, –Ω–æ —Ä–∞–±–æ—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É –ø–æ–∑–∏—Ü–∏–π –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è positionIdx 1/2 ‚Äî —Å—á–∏—Ç–∞–µ–º Hedge Mode –≤–∫–ª—é—á—ë–Ω.
    """
    for p in positions_list or []:
        try:
            idx = int(p.get("positionIdx", 0))
            if idx in (1, 2):
                return True
        except Exception:
            pass
    return False


async def open_trade_for_all_clients(symbol, side, entry_price, leverage, tp=None, sl=None):
    logging.info("üì§ –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for user in users_collection.find({
        "copy_enabled": True,
        "api_key": {"$exists": True, "$ne": None},
        "api_secret": {"$exists": True, "$ne": None}
    }):
        user_id = user["user_id"]
        chat_id = user.get("chat_id")
        fixed_usdt = float(user.get("fixed_usdt", 10))
        signals_left = int(user.get("signals_left", 0))
        lang = user.get("lang", "ru")  # i18n

        if signals_left <= 0:
            logging.info(f"[‚õî SKIP] user_id={user_id}, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")
            users_collection.update_one({"user_id": user_id}, {"$set": {"copy_enabled": False}})
            continue

        try:
            session = HTTP(api_key=user["api_key"], api_secret=user["api_secret"], recv_window=10000)

            # 1) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
            info = session.get_instruments_info(category="linear", symbol=symbol)
            info_list = (info or {}).get("result", {}).get("list", [])
            if not info_list:
                logging.warning(f"[‚ö†Ô∏è NO INSTRUMENT INFO] user_id={user_id}, symbol={symbol}")
                continue

            lot_info = info_list[0].get("lotSizeFilter", {})
            step = lot_info.get("qtyStep", "0.001")
            min_qty = float(lot_info.get("minOrderQty", step))

            # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (hedge/one-way)
            pre_positions = session.get_positions(category="linear", symbol=symbol).get("result", {}).get("list", [])
            hedge_mode = _is_hedge_mode(pre_positions)

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
            if hedge_mode:
                dup = next((p for p in pre_positions
                            if p.get("symbol") == symbol
                            and p.get("side") == side
                            and float(p.get("size", 0)) > 0), None)
                if dup:
                    logging.info(f"[‚è≠ SKIP DUP OPEN] user_id={user_id}, {symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç {side} (hedge)")
                    continue
            else:
                one = next((p for p in pre_positions
                            if p.get("symbol") == symbol
                            and float(p.get("size", 0)) > 0), None)
                if one and one.get("side") == side:
                    logging.info(f"[‚è≠ SKIP DUP OPEN] user_id={user_id}, {symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç {side} (one-way)")
                    continue

            # 3) –†–∞—Å—á—ë—Ç –æ–±—ä—ë–º–∞
            raw_qty = (fixed_usdt * float(leverage)) / max(float(entry_price), 1e-9)
            qty = round_qty(raw_qty, step)
            if qty < min_qty:
                logging.warning(f"[‚ö†Ô∏è SKIP] user_id={user_id}, qty={qty} < min={min_qty} for {symbol}")
                continue

            # 4) –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø–ª–µ—á–æ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
            try:
                session.set_leverage(
                    category="linear",
                    symbol=symbol,
                    buyLeverage=leverage,
                    sellLeverage=leverage
                )
            except Exception as e:
                logging.warning(f"[‚ö†Ô∏è LEVERAGE FAIL] user_id={user_id}, {symbol}: {e}")

            # 5) –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            order_params = {
                "category": "linear",
                "symbol": symbol,
                "side": side,
                "order_type": "Market",
                "qty": str(qty),
                "time_in_force": "GoodTillCancel",
            }
            if hedge_mode:
                order_params["position_idx"] = 1 if side == "Buy" else 2

            if tp is not None:
                order_params["take_profit"] = round(float(tp), 4)
            if sl is not None:
                order_params["stop_loss"] = round(float(sl), 4)

            # 6) –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä (c –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ä–µ—Ç—Ä–∞–µ–º –±–µ–∑ position_idx –ø—Ä–∏ –æ—à–∏–±–∫–µ)
            try:
                session.place_order(**order_params)
            except Exception as e:
                msg = str(e)
                if "position idx not match position mode" in msg and "position_idx" in order_params:
                    # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –±–µ–∑ position_idx (–Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–≤–µ—Ä–Ω–æ–π –∞–≤—Ç–æ-–¥–µ—Ç–µ–∫—Ü–∏–∏)
                    bad = order_params.pop("position_idx", None)
                    logging.warning(f"[‚Ü©Ô∏è RETRY] user_id={user_id}, —É–¥–∞–ª—è—é position_idx={bad} –∏ –ø–æ–≤—Ç–æ—Ä—è—é place_order")
                    session.place_order(**order_params)
                else:
                    raise

            # 7) –û–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å —Å–∏–≥–Ω–∞–ª–æ–≤
            users_collection.update_one({"user_id": user_id}, {"$inc": {"signals_left": -1}})

            # 8) –ß–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            post_positions = session.get_positions(category="linear", symbol=symbol).get("result", {}).get("list", [])
            if hedge_mode:
                new_pos = next((p for p in post_positions
                                if p.get("symbol") == symbol
                                and p.get("side") == side
                                and float(p.get("size", 0)) > 0), None)
            else:
                new_pos = next((p for p in post_positions
                                if p.get("symbol") == symbol
                                and float(p.get("size", 0)) > 0), None)

            avg_price = float(new_pos.get("avgPrice", entry_price)) if new_pos else float(entry_price)

            # 9) –õ–æ–≥–∏—Ä—É–µ–º –û–¢–ö–†–´–¢–ò–ï –≤ –∏—Å—Ç–æ—Ä–∏—é (–≤–∞–∂–Ω–æ: exit=0 –∏ status='open')
            history_collection.insert_one({
                "user_id": user_id,
                "symbol": symbol,
                "side": side,
                "entry": avg_price,
                "size": qty,
                "tp": float(tp) if tp is not None else 0.0,
                "sl": float(sl) if sl is not None else 0.0,
                "exit": 0.0,
                "status": "open",
                "timestamp": datetime.utcnow()
            })

            # 10) –°–æ–æ–±—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—É (i18n)
            if chat_id:
                side_txt = tr(lang, "buy") if side == "Buy" else tr(lang, "sell")
                msg = (
                    f"{tr(lang, 'opened_title')}\n"
                    f"{tr(lang, 'pair')}: {symbol}\n"
                    f"{tr(lang, 'side')}: {side_txt}\n"
                    f"{tr(lang, 'entry')}: {avg_price}\n"
                    f"{tr(lang, 'qty')}: {qty}\n"
                    f"{tr(lang, 'lev')}: {leverage}x"
                )
                await bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")

            logging.info(f"[‚úÖ TRADE OPENED] user_id={user_id}, {symbol} {side} qty={qty}")

        except Exception as e:
            logging.error(f"[‚ùå ERROR] user_id={user_id}: {e}", exc_info=True)


async def close_trade_for_all_clients(symbol: str):
    logging.info("üì§ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫...")

    for user in users_collection.find({
        "copy_enabled": True,
        "api_key": {"$exists": True, "$ne": None},
        "api_secret": {"$exists": True, "$ne": None}
    }):
        user_id = user["user_id"]
        chat_id = user.get("chat_id")
        lang = user.get("lang", "ru")  # i18n

        try:
            session = HTTP(api_key=user["api_key"], api_secret=user["api_secret"], recv_window=10000)

            positions = session.get_positions(category="linear", symbol=symbol).get("result", {}).get("list", [])
            # –õ—é–±–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
            position = next((p for p in positions if p.get("symbol") == symbol and float(p.get("size", 0)) > 0), None)
            if not position:
                continue

            side_to_close = "Sell" if position.get("side") == "Buy" else "Buy"
            qty = float(position.get("size"))
            position_idx = int(position.get("positionIdx", 0))

            close_order = {
                "category": "linear",
                "symbol": symbol,
                "side": side_to_close,
                "order_type": "Market",
                "qty": str(qty),
                "time_in_force": "GoodTillCancel",
                "reduce_only": True
            }
            if position_idx in (1, 2):
                close_order["position_idx"] = position_idx

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º (—Å —Ä–µ—Ç—Ä–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∂–∏–º–∞)
            try:
                session.place_order(**close_order)
            except Exception as e:
                msg = str(e)
                if "position idx not match position mode" in msg and "position_idx" in close_order:
                    bad = close_order.pop("position_idx", None)
                    logging.warning(f"[‚Ü©Ô∏è RETRY CLOSE] user_id={user_id}, —É–¥–∞–ª—è—é position_idx={bad} –∏ –ø–æ–≤—Ç–æ—Ä—è—é place_order")
                    session.place_order(**close_order)
                else:
                    raise

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –∑–∞–∫—Ä—ã—Ç–∏—è (status='close', —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã)
            entry_price = float(position.get("avgPrice", 0))
            # –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ª—É—á—à–µ –¥—ë—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é markPrice —Å–Ω–æ–≤–∞ ‚Äî –Ω–æ –±–µ—Ä—ë–º –∏–∑ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞
            exit_price = float(position.get("markPrice", 0))

            history_collection.insert_one({
                "user_id": user_id,
                "symbol": symbol,
                "side": side_to_close,
                "entry": entry_price,
                "size": qty,
                "tp": 0.0,
                "sl": 0.0,
                "exit": exit_price,
                "status": "close",
                "timestamp": datetime.utcnow()
            })

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ (i18n)
            if chat_id:
                msg = (
                    f"{tr(lang, 'closed_title')}\n"
                    f"{tr(lang, 'pair')}: {symbol}\n"
                    f"{tr(lang, 'qty')}: {qty}\n"
                    f"{tr(lang, 'time')}: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}"
                )
                await bot.send_message(chat_id=chat_id, text=msg, parse_mode="Markdown")

            logging.info(f"[üõë CLOSED] user_id={user_id}, {symbol} qty={qty}")

        except Exception as e:
            logging.error(f"[‚ùå CLOSE ERROR] user_id={user_id}: {e}", exc_info=True)
