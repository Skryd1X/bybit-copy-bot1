from pymongo import MongoClient
from datetime import datetime

# üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGO_URI = "mongodb+srv://signalsbybitbot:ByBitSignalsBot%40@cluster0.ucqufe4.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(MONGO_URI)

# üìÇ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
db = client["bybit_bot"]
subscribers_collection = db["subscribers"]

signal_db = client["signal_bot"]
users_collection = signal_db["users"]

# üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ chat_id –∏ —Å–≤—è–∑—å —Å user_id (–±–µ–∑ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
def add_chat_id(chat_id: int, user_id: int = None):
    # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if not subscribers_collection.find_one({"chat_id": chat_id}):
        subscribers_collection.insert_one({"chat_id": chat_id})

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º chat_id –∫ user_id –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if user_id:
        users_collection.update_one(
            {"user_id": user_id},
            {
                "$set": {
                    "chat_id": chat_id
                },
                "$setOnInsert": {
                    "copy_enabled": False,
                    "fixed_usdt": 10,
                    "lang": "ru",
                    "created_at": datetime.utcnow(),
                    "signals_left": 0,
                    "awaiting": None
                }
            },
            upsert=True
        )

# üì¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö chat_id
def get_all_chat_ids():
    return [doc["chat_id"] for doc in subscribers_collection.find()]

# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ chat_id
def remove_chat_id(chat_id: int):
    subscribers_collection.delete_one({"chat_id": chat_id})
    users_collection.update_many({"chat_id": chat_id}, {"$unset": {"chat_id": ""}})

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(chat_id: int) -> bool:
    return subscribers_collection.find_one({"chat_id": chat_id}) is not None

# üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(user_id: int) -> dict:
    user = users_collection.find_one({"user_id": user_id})
    if not user:
        user = {
            "user_id": user_id,
            "lang": "ru",
            "awaiting": None,
            "copy_enabled": False,
            "signals_left": 0,
            "fixed_usdt": 10,
            "created_at": datetime.utcnow()
        }
        users_collection.insert_one(user)
    return user

# ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
def update_user(user_id: int, data: dict):
    users_collection.update_one({"user_id": user_id}, {"$set": data}, upsert=True)

# üîê –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–µ–π (–≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π)
def save_api_keys(user_id: int, api_key: str, api_secret: str, account_type: str = "UNIFIED"):
    users_collection.update_one(
        {"user_id": user_id},
        {
            "$set": {
                "api_key": api_key,
                "api_secret": api_secret,
                "account_type": account_type,
                "copy_enabled": True
            }
        },
        upsert=True
    )
